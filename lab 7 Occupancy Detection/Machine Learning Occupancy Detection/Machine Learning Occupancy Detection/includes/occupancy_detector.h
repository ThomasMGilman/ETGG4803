#pragma once
#include <stdafx.h>
#include <occupancy_test.h>
#include <Utilities.h>

using namespace std;

class OccupancyDetector 
{
private:
	vector<OccupancyTest*> mTraining_data;

	Attributes mTotalTrainCombinedVals;

	vector<float> mSorted_TempValues;
	vector<float> mSorted_HumidValues;
	vector<float> mSorted_LightValues;
	vector<float> mSorted_CO2Values;
	vector<float> mSorted_HumidRatioValues;

	unsigned numTests = 0;
	
	Attributes mRangeTrainAttribVals;
	Attributes mMaxTrainAttribVals;
	Attributes mMinTrainAttribVals;
	Attributes mMeanTrainAttribVals;
	Attributes mDevTrainAttribVals;
	Attributes mTrainOccPercentageVals;
	Attributes mTrainOccWeights;
	Attributes mTrainUnoccWeights;
	OccupancyClassification* mOcc = new OccupancyClassification(true);
	OccupancyClassification* mUnocc = new OccupancyClassification(false);

	AttribIntervals mIntervalInfo;

	vector<OccupancyTest> mData_test1;
	vector<OccupancyTest> mData_test2;
	string file_header = "\t\t\t\t\t\t\Time\t\t|\tTemperature in Celsius\t|\tHumidity Percentage\t|\tLight in Lux\t|\tCO2 in ppm\t\t|\tHumidityRatio in kgwater-vapor/kg-air\t|\tOccupied";

protected:
	
public:

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////// CONSTRUCTOR && DESTRUCTOR /////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	OccupancyDetector(string training_data_folder, string test_data_folder);

	~OccupancyDetector() 
	{
		delete(mOcc);
		delete(mUnocc);
		for (int i = 0; i < mTraining_data.size(); i++)
			delete(mTraining_data[i]);
	};

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////// PROCESS FUNCTIONS /////////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private:
	void process_tests(string tests_data_folder);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////// PREPROCESS FUNCTIONS //////////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private:
	void build_training_data(string training_data_folder);

	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////// OUTPUT AND DEBUG FUNCTIONS ////////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

public:
	void output_all_to_files();

	void output_to_file(vector<OccupancyTest*> data_set, string file_name, string file_path = "..\\Media\\Output");

	/// write the lines to the file specified the close it.
	int file_type_writer(vector<OccupancyTest*> lines, const string& file_path, const string& file_name, bool write_at_end = false, bool clear_file = false);
};